@using System.Security.Claims
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@if (User.Identity is not null && User.Identity.IsAuthenticated) 
{
	string? userAvatar = Context.User.FindFirst("Avatar")?.Value;
	string? email = Context.User.FindFirst(ClaimTypes.Email)?.Value;

	<div class="row">
		<div class="col d-flex align-items-center flex-column">
			<div>@User.Identity.Name</div>
			<div class="w-100 position-relative" id="avatarImage">
				<img src="~/img/@(string.IsNullOrEmpty(userAvatar) ? "default-avatar.png" : $"avatars/{userAvatar}")" alt="avatar"
					 class="my-3 w-100" title="@User.Identity.Name"
					 style="aspect-ratio: 1/1; border-radius: 100%">
				<span class="position-absolute opacity-0 text-center h3 mx-1">Change avatar</span>
			</div>
		</div>
		<div class="col-10">
			<h3 class="mb-3">Change password</h3>
			<form id="changePasswordForm" class="text-center needs-validation" method="post">
				<!-- Old password input -->
				<div class="form-outline form-auth-mdb mb-4">
					<input type="password" id="changePasswordOld" class="form-control" autocomplete="off" required="" minlength="5">
					<label class="form-label" style="margin-left: 0px;">Your current password</label>
					<div class="invalid-feedback">Please provide a valid password.</div>
					<div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
				</div>

				<!-- New password input -->
				<div class="form-outline form-auth-mdb mb-4">
					<input type="password" id="changePasswordNew" class="form-control" autocomplete="off" required="" minlength="5">
					<label class="form-label" style="margin-left: 0px;">Your new password</label>
					<div class="invalid-feedback">Please provide a valid password.</div>
					<div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
				</div>

				<!-- Repeat new password input -->
				<div class="form-outline form-auth-mdb mb-4">
					<input type="password" id="changePasswordNewRepeat" class="form-control" autocomplete="off" required="" minlength="5">
					<label class="form-label" style="margin-left: 0px;">Repeat your new password</label>
					<div asp-validation-for="PasswordConfirm" class="invalid-feedback">Password mismatch.</div>
					<div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
				</div>

				<button class="btn btn-primary btn-block mb-3" id="changePasswordBtn" type="button">
					Change password
				</button>

				<div id="changePasswordFeedback" class="text-danger"></div>
			</form>
			<hr class="my-4">

			<h3 class="mb-3">Change email</h3>
			<form id="changeEmailForm" class="text-center needs-validation" method="post">
				<!-- Current email input -->
				<div class="form-outline form-auth-mdb mb-4">
					<input type="text" id="currentEmail" value="@email" readonly class="form-control" autocomplete="off">
					<label class="form-label" style="margin-left: 0px;">Your email</label>
					<div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
				</div>

				<!-- New email input -->
				<div class="form-outline form-auth-mdb mb-4">
					<input type="email" id="newEmail" class="form-control" autocomplete="off" required="" minlength="5">
					<label class="form-label" style="margin-left: 0px;">Your new email</label>
					<div class="invalid-feedback">Please provide a valid email.</div>
					<div class="form-notch"><div class="form-notch-leading" style="width: 9px;"></div><div class="form-notch-middle" style="width: 8px;"></div><div class="form-notch-trailing"></div></div>
				</div>

				<button class="btn btn-primary btn-block mb-3" id="changeEmalBtn" type="button">
					Change email
				</button>

				<div id="changeEmailFeedback" class="text-danger"></div>
			</form>
		</div>
	</div>


	<div class="modal fade" id="uploadAvatarModal" tabindex="-1" style="display: none;" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Avatar preview</h5>
					<button type="button" class="btn-close" data-mdb-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<img id="avatarPreview" class="w-100" style="aspect-ratio: 1/1; border-radius: 100%">
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-mdb-dismiss="modal">Close</button>
					<form id="uploadAvatarForm" method="post" enctype="multipart/form-data">
						<button asp-action="UploadAvatar" type="submit" class="btn btn-primary">Upload</button>
					</form>
					
				</div>
			</div>
		</div>
	</div>
}
else 
{
    <p>You're not authorized.</p>
}

<script type="text/javascript">
	
	document.addEventListener("DOMContentLoaded", () => {
		const input = document.createElement('input');
		input.accept = "image/jpeg, image/png, image/jpg";
		input.type = 'file';
		input.hidden = true;
		input.name = "file";
		document.getElementById("uploadAvatarForm").appendChild(input);
		const uploadAvatarModal = new mdb.Modal(document.getElementById('uploadAvatarModal'), {});

		input.onchange = e => {
			var file = e.target.files[0];

			var reader = new FileReader();
			reader.readAsDataURL(file);

			reader.onload = (readerEvent) => {
				var content = readerEvent.target.result;
				document.getElementById("avatarPreview").src = content;
				uploadAvatarModal.show();
			};
		};

		document.getElementById("avatarImage").onclick = () => {
			input.click();
		};

		// Change password
		const antiForgeryToken = document.querySelectorAll('input[name=__RequestVerificationToken]')[0].value;
		const changePasswordForm = document.getElementById("changePasswordForm");
		const changePasswordBtn = document.getElementById("changePasswordBtn");
		const changePasswordOldInput = document.getElementById("changePasswordOld");
		const changePasswordNewInput = document.getElementById("changePasswordNew");
		const changePasswordNewRepeatInput = document.getElementById("changePasswordNewRepeat");
		const changePasswordFeedback = document.getElementById("changePasswordFeedback");

		changePasswordBtn.addEventListener("click", () => {
			changePasswordForm.classList.add("was-validated");
			changePasswordFeedback.innerText = "";

			// Password match validation
			const password = changePasswordNewInput.value;
			const passwordConfirm = changePasswordNewRepeatInput.value;
			if (password !== passwordConfirm) {
				changePasswordNewRepeatInput.classList.add("is-invalid");
				return;
			}
			else {
				changePasswordNewRepeatInput.classList.remove("is-invalid");
			}

			if (changePasswordForm.checkValidity()) {
				const oldPassword = changePasswordOldInput.value;
				const passwordNew = changePasswordNewInput.value;
				const passwordNewRepeat = changePasswordNewRepeatInput.value;

				fetch("ChangePassword", {
					body: `OldPassword=${oldPassword}&NewPassword=${passwordNew}&NewPasswordRepeat=${passwordNewRepeat}&__RequestVerificationToken=${antiForgeryToken}`,
					headers: {
						"Content-Type": "application/x-www-form-urlencoded",
					},
					method: "post",
				})
					.then(r => r.json())
					.then(j => {
						if (j.success === true) {
							changePasswordFeedback.classList.remove("text-danger");
							changePasswordFeedback.classList.add("text-success");
							changePasswordFeedback.innerText = "Password successfuly changed";

							changePasswordOldInput.value = "";
							changePasswordNewInput.value = "";
							changePasswordNewRepeatInput.value = "";

							changePasswordForm.classList.remove("was-validated");
						}
						else {
							changePasswordFeedback.classList.remove("text-success");
							changePasswordFeedback.classList.add("text-danger");
							j.errors.forEach(e => changePasswordFeedback.innerText += e + "\n");
						}
					});
			}
			else {
				registerForm.reportValidity();
				return;
			}
		});

		// Change email
		const changeEmailForm = document.getElementById("changeEmailForm");
		const changeEmalBtn = document.getElementById("changeEmalBtn");
		const newEmailInput = document.getElementById("newEmail");
		const changeEmailFeedback = document.getElementById("changeEmailFeedback");
		
		changeEmalBtn.addEventListener("click", () => {
			changeEmailForm.classList.add("was-validated");
			changeEmailFeedback.innerText = "";

			if (changeEmailForm.checkValidity()) {
				const email = newEmailInput.value;

				fetch("RequestChangeEmail", {
					body: `newEmail=${email}&__RequestVerificationToken=${antiForgeryToken}`,
					headers: {
						"Content-Type": "application/x-www-form-urlencoded",
					},
					method: "post",
				})
					.then(r => r.json())
					.then(j => {
						if (j.success === true) {
							changeEmailFeedback.classList.remove("text-danger");
							changeEmailFeedback.classList.add("text-success");
							changeEmailFeedback.innerText = "A letter sent to you email adress.";

							newEmailInput.value = "";

							changeEmailForm.classList.remove("was-validated");
						}
						else {
							changeEmailFeedback.classList.remove("text-success");
							changeEmailFeedback.classList.add("text-danger");
							j.errors.forEach(e => changeEmailFeedback.innerText += e + "\n");
						}
					});
			}
			else {
				registerForm.reportValidity();
				return;
			}
		});
	});
</script>