@model TopicViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
	PostViewModel mainPost = new()
			{
				Id = Model.Id.ToString(),
				AuthorName = Model.AuthorName,
				AuthorRole = Model.AuthorRole,
				AuthorId = Model.AuthorId,
				AuthorAvatarURL = Model.AuthorAvatarURL,
				Content = Model.Description,
				CreationDateString = Model.CreationDateString,
				Likes = Model.Likes,
				Dislikes = Model.Dislikes,
				UserRating = Model.UserRating
			};
}

<div class="card mb-3">
	<div class="card-body">
		<h2 id="topicTitle">@Model.Title</h2>
		<hr />
		<div class="d-flex align-items-center ">
			<img src="~/img/@(string.IsNullOrEmpty(Model.AuthorAvatarURL) ? "default-avatar.png" : $"avatars/{Model.AuthorAvatarURL}")" alt="avatar"
				 title="@Model.AuthorName"
		 		 style="width: 40px; height: 40px; border-radius: 100%">
			<div class="mx-3">
				<div>Author <a asp-controller="Account" asp-action="Profile" asp-route-id="@Model.AuthorId">@Model.AuthorName</a></div>
				<div>@Model.CreationDateString</div>
			</div>
		</div>
	</div>
</div>

@Html.DisplayFor(m => mainPost, "ForumPost")

@foreach (var post in Model.Posts)
{
	@Html.DisplayFor(m => post, "ForumPost")
}

@if (User.Identity is not null && User.Identity.IsAuthenticated && !User.IsInRole("NotConfirmed"))
{
	<div class="card mb-3">
		<div class="card-body">
			<h5 class="d-inline-block">Reply to </h5><h6 id="replyTo" class="d-inline-block mx-1">"@Model.Title"</h6>
			<form id="addPostForm" class="text-center mt-1 needs-validation d-flex justify-content-start flex-column" method="post">
				<input id="topicId" name="topicid" value="@Model.Id" hidden />
				<input id="replyId" name="replyid" hidden />
				<textarea id="replyContent" class="md-textarea form-control mb-3" name="content" rows="3"></textarea>
				<button type="submit" asp-action="CreatePost" class="btn btn-primary">Post</button>
			</form>
		</div>
	</div>

	<script>
		document.addEventListener("DOMContentLoaded", () => {
			// Likes
			for (let elem of document.querySelectorAll("[rating-item-id]")) {
				elem.addEventListener('click', ratingClick);
			}

			// Reply
			const replyButtons = document.querySelectorAll("[reply-post-id]");
			for (let i = 1; i < replyButtons.length; i++) {
				replyButtons[i].addEventListener('click', replyClick);
			}
			replyButtons[0].addEventListener('click', replyTopicClick);
		});
		
		function ratingClick(e) {

			const data = {
				"type": "Post",
				"itemId": e.currentTarget.getAttribute("rating-item-id"),
				"rating": e.currentTarget.getAttribute("rating-value"),
			}

			const icon = e.currentTarget.getElementsByClassName("rate-icon")[0];
			const count = e.currentTarget.getElementsByClassName("rate-count")[0];

			const oppositeParent = e.currentTarget.parentElement.querySelector(`[rating-value="${data.rating * -1}"]`);
			const oppositeIcon = oppositeParent.getElementsByClassName("rate-icon")[0];
			const oppositeCount = oppositeParent.getElementsByClassName("rate-count")[0];

			const method = icon.classList.contains('fas') ? "DELETE" : "POST";

			fetch("/api/rate", {
				method: method,
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data),
			})
				.then(r => {
					if (r.status >= 200 && r.status < 300) {
						if (method === "POST") {
							if (r.status === 201) {
								icon.classList.remove("far");
								icon.classList.add("fas");
								count.innerText = Number(count.innerText) + 1;
							}
							else if (r.status === 200) {
								icon.classList.remove("far");
								icon.classList.add("fas");
								count.innerText = Number(count.innerText) + 1;

								oppositeIcon.classList.remove("fas");
								oppositeIcon.classList.add("far");
								oppositeCount.innerText = Number(count.innerText) - 1;
							}
						}
						else {
							if(r.status === 202) {
								icon.classList.remove("fas");
								icon.classList.add("far");
								count.innerText = Number(count.innerText) - 1;
							}
						}
					}
					else {
						r.text().then((error) => console.log(error));
					}
				})
		}

		function replyClick(e) {
			const id = e.currentTarget.getAttribute("reply-post-id");
			document.getElementById("replyId").value = id;
			let replyText = e.currentTarget.parentElement.getElementsByClassName("post-content")[0].innerText;
			if(replyText.length > 20) {
				replyText = replyText.slice(20);
			}
			document.getElementById("replyTo").innerText = `"${replyText}"`;
		}

		function replyTopicClick(e) {
			document.getElementById("replyId").value = "";
			document.getElementById("replyTo").innerText = `"${document.getElementById("topicTitle").innerText}"`;
		}

	</script>
}